//! Autogenerated weights for pallet_medical_record
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-06, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Alexs-MacBook-Pro-2.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ../../target/release/node-template
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_template
// --extrinsic
// *
// --steps=50
// --repeat=20
// --wasm-execution=compiled
// --output
// pallets/template/src/weights.rs
// --template
// ../../.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_medical_record.
pub trait WeightInfo {
	fn create_patient() -> Weight;
	fn update_patient() -> Weight;
	fn delete_patient() -> Weight;
	fn create_clinical_test() -> Weight;
	fn update_clinical_test() -> Weight;
	fn delete_clinical_test() -> Weight;
	fn create_disease_progression() -> Weight;
	fn update_disease_progression() -> Weight;
	fn delete_disease_progression() -> Weight;
	fn create_medical_record() -> Weight;
	fn search_patient_by_name() -> Weight;
	fn record_change() -> Weight;
}

/// Weights for pallet_medical_record using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn create_patient() -> Weight {
		Weight::from_parts(15_000, 0) // Increased due to multiple change records
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(9)) // patient + name mapping + counter + 6 change records
	}

	fn update_patient() -> Weight {
		Weight::from_parts(12_000, 0) // Increased due to change records
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(4)) // patient + name mapping + change records
	}

	fn delete_patient() -> Weight {
		Weight::from_parts(12_000, 0) // Increased due to change record
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(4)) // patient + name mapping + change record + counter
	}

	fn create_clinical_test() -> Weight {
		Weight::from_parts(10_000, 0)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}

	fn update_clinical_test() -> Weight {
		Weight::from_parts(10_000, 0)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}

	fn delete_clinical_test() -> Weight {
		Weight::from_parts(10_000, 0)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}

	fn create_disease_progression() -> Weight {
		Weight::from_parts(10_000, 0)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}

	fn update_disease_progression() -> Weight {
		Weight::from_parts(10_000, 0)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}

	fn delete_disease_progression() -> Weight {
		Weight::from_parts(10_000, 0)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}

	fn create_medical_record() -> Weight {
		Weight::from_parts(10_000, 0)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}

	fn search_patient_by_name() -> Weight {
		Weight::from_parts(10_000, 0)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(0))
	}

	fn record_change() -> Weight {
		Weight::from_parts(8_000, 0)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(3)) // change + record mapping + counter
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn create_patient() -> Weight { Weight::from_parts(10_000, 0) }
	fn update_patient() -> Weight { Weight::from_parts(10_000, 0) }
	fn delete_patient() -> Weight { Weight::from_parts(10_000, 0) }
	fn create_clinical_test() -> Weight { Weight::from_parts(10_000, 0) }
	fn update_clinical_test() -> Weight { Weight::from_parts(10_000, 0) }
	fn delete_clinical_test() -> Weight { Weight::from_parts(10_000, 0) }
	fn create_disease_progression() -> Weight { Weight::from_parts(10_000, 0) }
	fn update_disease_progression() -> Weight { Weight::from_parts(10_000, 0) }
	fn delete_disease_progression() -> Weight { Weight::from_parts(10_000, 0) }
	fn create_medical_record() -> Weight { Weight::from_parts(10_000, 0) }
	fn search_patient_by_name() -> Weight { Weight::from_parts(10_000, 0) }
	fn record_change() -> Weight { Weight::from_parts(8_000, 0) }
}
